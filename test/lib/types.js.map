{"version":3,"file":"types.js","sources":["../../src/js/types/neuron.coffee","../../src/js/types/block.coffee","../../src/js/types/constants.coffee","../../src/js/types/bodyblock.coffee","../../src/js/types/muscleblock.coffee","../../src/js/types/thinkblock.coffee","../../src/js/types/goblock.coffee","../../src/js/types/gene.coffee","../../src/js/types/primeblock.coffee","../../src/js/types/organism.coffee","../../src/js/types/hexgrid.coffee","../../src/js/types/sparsemap.coffee","../../src/js/cjs.coffee"],"sourcesContent":["# Neuron type to make setting these up easier\nexport default class Neuron\n  bias: 0\n  activationFn: null\n\n  constructor: (@bias, @activationFn)->","import Neuron from './neuron'\n\n# basal block for inheritence\nexport default class Block\n  inputs:  null\n  hiddens: null\n  outputs: null\n  \n  constructor: ()->\n    @inputs  = []\n    @hiddens = []\n    @outputs = []\n    \n  addInput: (bias, fn)->\n    @inputs.push new Neuron(bias, fn)\n    \n  addHidden: (bias)->\n    @hiddens.push new Neuron(bias)\n    \n  addOutput: (bias, fn)->\n    @outputs.push new Neuron(bias, fn)","export minSize = 12\nexport maxSize = 24\n\nexport sizeRange = maxSize - minSize\n\nexport minDistance = 64\nexport maxDistance = 128\n\nexport distanceRange = maxDistance - minDistance\n\n# funny\n# 51217867 - spinn\n# 564818715 - slightly intelligent?\n# 373966899 - spiiin\n# 1501161300 - INTERESTING\n# 612856665 - Random twitches\n# 446898119 - Spin\n# 233940816 - REALLY INTERESTING\n# 850168915 - Has some coordinated muscles\n# 128832151 - :)\n# 623008498\n# 541939027\n# 348091427","import Matter from 'matter-js'\nimport Block  from './block'\n\nimport {\n  minSize\n  sizeRange\n  minDistance\n  distanceRange\n} from './constants'\n\nPI  = Math.PI\nTAU = PI * 2\ncos = Math.cos\nsin = Math.sin\n\nexport default class BodyBlock extends Block\n  b: 0\n  \n  distance: 0\n  angle: 0\n  x: 0\n  y: 0\n  size: 0\n  \n  collisions: 0\n  body: null\n  primeBlock: null\n  \n  type: 'body-block'\n  \n  # read the 2 block params b and c as well as the origin and initial angle\n  constructor: (@b = 0, @primeBlock)->\n    super\n    \n    b = @b\n    c = (b % Math.floor(Math.pow(10, Math.floor(Math.log10(b))))) * 10 || 0\n    d = (c % Math.floor(Math.pow(10, Math.floor(Math.log10(c))))) * 10 || 0\n    \n    primeBlock = @primeBlock\n    \n    @size = b % sizeRange + minSize\n    \n    @distance = b % distanceRange + minDistance\n    \n    @angle = (b + primeBlock.body.angle) % TAU\n    offsetX = @distance * cos @angle\n    offsetY = @distance * sin @angle\n    @x = offsetX + primeBlock.body.position.x\n    @y = offsetY + primeBlock.body.position.y\n    \n    @body = Matter.Bodies.circle @x, @y, @size,\n      angle: @angle\n    \n    @body._parentBlock = @\n    \n    @addInput b - c, ()=>\n      ret = @collisions\n      @collisions = 0\n      return @collisions\n      \n    @addInput c - d, ()=>\n      return (@body.angle - @primeBlock.body.angle  + TAU) % TAU\n        \n  # events\n  oncollisionActive: ()->\n    @collisions++","import Matter from 'matter-js'\nimport Block  from './block'\n\nimport {\n  minDistance\n  distanceRange \n  minSize\n} from './constants'\n\nConstraint = Matter.Constraint\n\nexport default class MuscleBlock extends Block\n  b: 0\n  stiffness: 0\n  distance:  0\n  \n  blockA: null\n  blockB: null\n  body:   null\n  primeBlock: null\n  \n  # entension lengths\n  length1: 0\n  length2: 0\n  length:  0\n  \n  lengthRange: 0\n  \n  type: 'muscle-block'\n\n  # read the 2 block params b and c as well as vertex blocks (including prime)\n  constructor: (@b, @primeBlock, blocks)->\n    super\n    \n    if blocks.length == 0\n      return\n  \n    b = @b\n    c = (b % Math.floor(Math.pow(10, Math.floor(Math.log10(b))))) * 10 || 0\n    d = (c % Math.floor(Math.pow(10, Math.floor(Math.log10(c))))) * 10 || 0\n  \n    @stiffness = b % 1\n        \n    numBlocks = blocks.length + 1\n    i1 = Math.round(b) % numBlocks\n    i2 = Math.round(c) % numBlocks\n    \n    if i1 == i2\n      i2 = (i2 + 1) %numBlocks\n      \n    @blockA = blocks[i1 - 1] ? @primeBlock\n    @blockB = blocks[i2 - 1] ? @primeBlock\n    \n    # annotate muscle connections\n    @connectMuscle @blockA\n    @connectMuscle @blockB\n    \n    @length = b % distanceRange + minDistance\n      \n    # length 1 is the shorter one\n    @length1 = @length * .5\n    @length2 = @length * 1.5\n    @lengthRange = @length2 - @length1\n    \n    @body = Constraint.create \n      bodyA: @blockA.body\n      pointA: \n        x: b % minSize - minSize / 2\n        y: (b - c) % minSize - minSize / 2\n      bodyB: @blockB.body\n      pointB: \n        x: c % minSize - minSize / 2\n        y: (c - d) % minSize - minSize / 2\n      stiffness: .9 # @stiffness\n      damping: 0.01\n      length: @length\n      render:\n        lineWidth: 1\n        \n    @body._parentBlock = @\n    \n    @addInput b - c, ()=>\n      return (@length - @length1) / @lengthRange \n      \n    @addOutput c - d, (percent)=>\n      @length = @body.length = @lengthRange * percent  + @length1\n    \n  # annotate muscles to a block\n  connectMuscle: (block)->\n    if !block._muscles?\n      block._muscles = [@]\n    else\n      block._muscles.push @","import Matter from 'matter-js'\nimport Block  from './block'\n\nimport {\n  minSize\n  sizeRange\n  minDistance\n  distanceRange\n} from './constants'\n\nPI  = Math.PI\nTAU = PI * 2\ncos = Math.cos\nsin = Math.sin\n\nexport default class ThinkBlock extends Block\n  b: 0\n  c: 0\n  \n  distance: 0\n  angle: 0\n  x: 0\n  y: 0\n  bias: 0\n  \n  body: null\n  primeBlock: null\n  \n  type: 'think-block'\n  \n  # read the 2 block params b and c as well as the origin and initial angle\n  constructor: (@b = 0, @primeBlock)->\n    super\n    \n    b = @b\n    primeBlock = @primeBlock\n       \n    @distance = b % distanceRange + minDistance\n    \n    @angle = (b + primeBlock.body.angle) % TAU\n    offsetX = @distance * cos @angle\n    offsetY = @distance * sin @angle\n    @x = offsetX + primeBlock.body.position.x\n    @y = offsetY + primeBlock.body.position.y\n    \n    @body = Matter.Bodies.circle @x, @y, 12, \n      angle: @angle\n    \n    @body._parentBlock = @\n    \n    @addHidden b - (b % Math.floor(Math.pow(10, Math.floor(Math.log10(b))))) * 10","import Matter from 'matter-js'\nimport Block  from './block'\n\nimport {\n  minSize\n  sizeRange\n  minDistance\n  distanceRange\n} from './constants'\n\nPI  = Math.PI\nTAU = PI * 2\ncos = Math.cos\nsin = Math.sin\n\nexport default class GoBlock extends Block\n  b: 0\n  \n  distance: 0\n  angle: 0\n  x: 0\n  y: 0\n\n  force: 0\n  maxForce: 0\n  \n  collisions: 0\n  body: null\n  primeBlock: null\n  \n  type: 'go-block'\n  \n  # read the 2 block params b and c as well as the origin and initial angle\n  constructor: (@b, @primeBlock)->\n    super\n    \n    primeBlock = @primeBlock\n    \n    b = @b\n    c = (b % Math.floor(Math.pow(10, Math.floor(Math.log10(b))))) * 10 || 0\n    d = (c % Math.floor(Math.pow(10, Math.floor(Math.log10(c))))) * 10 || 0\n        \n    @size = 20\n    \n    @distance = b % distanceRange + minDistance\n    \n    @angle = (b + primeBlock.body.angle) % TAU\n    offsetX = @distance * cos @angle\n    offsetY = @distance * sin @angle\n    @x = offsetX + primeBlock.body.position.x\n    @y = offsetY + primeBlock.body.position.y\n    \n    @maxForce = b % 0.0001\n    \n    @body = Matter.Bodies.rectangle @x, @y, @size, @size,\n      angle: @angle\n    \n    @body._parentBlock = @\n    \n    @addInput b - c, ()=>\n      return @force / @maxForce\n      \n    @addInput c - d, ()=>\n      return (@body.angle - primeBlock.body.angle  + TAU) % TAU\n      \n    @addOutput b - d, (percent)=>\n      @force = Math.round(percent) * @maxForce\n      radius = @size / 2\n      Matter.Body.applyForce @body, {x: -cos(@body.angle) * radius, y: -sin(@body.angle) * radius }, { x: cos(@body.angle) * @force, y: sin(@body.angle) * @force }","import BodyBlock   from './bodyblock'\nimport MuscleBlock from './muscleblock'\nimport ThinkBlock  from './thinkblock'\nimport GoBlock     from './goblock'\n\nexport default class Gene\n  a: 0\n  b: 0\n  sequence: null\n    \n  # take a, the block type, b block parameter\n  constructor: (@a = 0, @b = 0, @sequence = []) ->\n    \n  # position blocks relative to primeBlock, convert gene to corresponding block\n  _toBodyBlock: (primeBlock)->\n    return new BodyBlock @b, primeBlock\n  \n  # position blocks relative to primeBlock, convert gene to corresponding block\n  _toThinkBlock: (primeBlock)->\n    return new ThinkBlock @b, primeBlock\n  \n  # position blocks relative to primeBlock, convert gene to corresponding block\n  _toGoBlock: (primeBlock)->\n    return new GoBlock @b, primeBlock\n    \n  # connect two blocks\n  _toMuscleBlock: (primeBlock, blocks)->\n    return new MuscleBlock @b, primeBlock, blocks\n    \n  # read int[] to generate a Gene[]\n  @toGenes: (genums = [])->\n    genes = []\n    gene = []\n    \n    i = 0\n    while i < genums.length \n      if genums[i] < 18\n        gene = [genums[i], 1, [genums[i]]]\n        genes.push gene\n      else if gene.length > 0\n        if i % 2 == 0\n          gene[1] *= (genums[i] - 17)\n        else\n          gene[1] /= (genums[i] - 17)\n          \n        gene[2].push genums[i]\n      \n      i++\n          \n    return genes.map (gene)->\n      return new Gene gene[0], gene[1], gene[2]\n  \n  # position blocks relative to primeBlock, read Gene[] and generate a Block[]\n  @toBlocks: (primeBlock, genes = [])->\n    blocks = []\n    muscles = []\n    \n    # vertexblocks\n    for gene in genes\n      if gene.a < 4\n        blocks.push gene._toBodyBlock primeBlock\n      else if gene.a < 8\n        blocks.push gene._toThinkBlock primeBlock\n      else if gene.a < 12\n        blocks.push gene._toGoBlock primeBlock\n          \n    # ... good luck ...\n    if blocks.length == 0\n      return blocks\n        \n    # muscleblocks\n    for gene in genes\n      if gene.a > 11 && gene.a < 18\n        muscles.push gene._toMuscleBlock primeBlock, blocks\n          \n    # 233940816 gives interesting results with this and 40 elements\n    # vertexblocks\n    # for gene in genes\n      # choice = Math.round(gene.a) % 12\n      # switch choice\n        # when 0, 1\n          # blocks.push gene._toBlock primeBlock\n        # when 2, 3, 4\n          # blocks.push gene._toThinkBlock primeBlock\n        # when 12\n          # blocks.push gene._toGoBlock primeBlock\n          \n    #... good luck ...\n    # if blocks.length == 0\n      # return blocks\n        \n    # muscleblocks\n    # for gene in genes\n      # choice = Math.round(gene.a) % 12\n      # switch choice\n        # when 5, 6, 7, 8, 9, 10, 11\n          # muscles.push gene._toMuscleBlock primeBlock, blocks\n          \n    return blocks.concat muscles","import Matter from 'matter-js'\nimport Block  from './block'\n\nBodies = Matter.Bodies\nBody   = Matter.Body\n\nTAU = Math.PI * 2\n\nexport default class PrimeBlock extends Block\n  @x: 0\n  @y: 0\n  @angle: 0\n  \n  body: null\n  \n  type: 'prime-block'\n  \n  # read the 2 block params b and c as well as the origin and initial angle\n  constructor: (\n    @x = 0, \n    @y = 0, \n    @angle = (Math.random() * 1000) % TAU\n  )-> \n    super\n    \n    @body = Matter.Bodies.circle @x, @y, 24, \n      angle: @angle\n      \n    @body._parentBlock = @\n  \n    @addHidden 0","import Matter   from 'matter-js'\n\nBodies     = Matter.Bodies\nBody       = Matter.Body\nConstraint = Matter.Constraint\nNetwork    = synaptic.Network\nLayer      = synaptic.Layer\n\nimport Gene       from './gene'\nimport PrimeBlock from './primeblock'\n\nexport default class Organism\n  @count: 0\n  id: 0\n  genums: null\n  genes: null\n  primeBlock: null\n  blocks: null\n  \n  bodies:  null\n  \n  # neurons\n  inputs:  null\n  hiddens: null\n  outputs: null\n  \n  perceptron: null\n  \n  # take a genums\n  constructor: (@genums = [])->\n    @id = Organism.count++\n  \n    # initialize the PrimeBlock\n    @primeBlock = new PrimeBlock()\n    \n    @genes  = Organism._compileGenes @genums\n    @blocks = Organism._compileBlocks @primeBlock, @genes\n    \n    if @blocks.length == 0\n      return\n    \n    @bodies = Organism._compileBodies @blocks\n    \n    # filter out the muscle types\n    @nonConstraints = bodies = []\n    for body in @bodies\n      bodies.push body if body._parentBlock.type != 'muscle-block'\n             \n    [@inputs, @hiddens, @outputs] = Organism._compilePerceptronLayers @blocks\n           \n    @perceptron = Organism._compilePerceptron @inputs, @hiddens, @outputs\n \n  # get a concatination of bodies and constraints, a short hand for adding to the world\n  getBodies: ()->\n    return @bodies ? [@primeBlock.body]\n    \n  # get a list of non-contraint bodies only\n  getNonConstraints: ()->\n    return @nonConstraints ? [@primeBlock.body]\n  \n  # execute one loop of the perceptron\n  think: ()->\n    if !@perceptron?\n      return\n    \n    inputData = (input.activationFn() for input in @inputs)\n    outputData = @perceptron.activate inputData\n    for output, i in @outputs\n      @outputs[i].activationFn outputData[i]\n      \n  # calcualte fitness\n  fitness: ()->\n    body = @primeBlock.body\n    position = body.position\n    sx = position.x\n    sy = position.y\n    mass = body.mass\n    \n    for block in @blocks\n      body = block.body\n      position = body.position\n      continue if !position\n      \n      sx += position.x * body.mass\n      sy += position.y * body.mass\n      mass += body.mass\n      \n    sx /= mass\n    sy /= mass\n      \n    return Math.sqrt(sx * sx + sy * sy) / 100\n             \n  # create and populate genes from genum\n  @_compileGenes: (genums)->\n    # convert genums to genes\n    return Gene.toGenes genums\n    \n  # create and populate blocks from genes\n  @_compileBlocks: (primeBlock, genes)->\n    # convert genes to blocks\n    initialBlocks = Gene.toBlocks primeBlock, genes\n     \n    @_idBlocks initialBlocks\n    \n    i = 0\n    \n    connectedFilter = {}\n    connectedBlocks = [primeBlock]\n    while connectedBlocks[i]\n      block = connectedBlocks[i]\n      \n      connectedFilter[block._id] = true\n     \n      # determine which blocks are connected to\n      switch block.type\n        when 'muscle-block'\n          blockA = block.blockA\n          blockB = block.blockB\n          if !connectedFilter[blockA._id]\n            connectedBlocks.push blockA\n            connectedFilter[blockA._id] = true\n          if !connectedFilter[blockB._id]\n            connectedBlocks.push blockB\n            connectedFilter[blockB._id] = true\n        else\n          if block._muscles\n            for muscle in block._muscles\n              if !connectedFilter[muscle._id]\n                connectedBlocks.push muscle\n                connectedFilter[muscle._id] = true\n      i++\n  \n    @_idBlocks connectedBlocks\n    \n    return connectedBlocks\n  \n  # add id to blocks\n  @_idBlocks: (blocks) ->\n    for block, i in blocks\n      block._id = i\n    \n  # create and populate bodies from blocks\n  @_compileBodies: (blocks)->\n    # store bodies\n    return (block.body for block in blocks)\n  \n  @_compilePerceptronLayers: (blocks)->\n    inputs  = []\n    hiddens = []\n    outputs = []\n    \n    for block in blocks\n      inputs  = inputs.concat  block.inputs\n      hiddens = hiddens.concat block.hiddens\n      outputs = outputs.concat block.outputs\n            \n    return [inputs, hiddens, outputs]\n    \n  @_compilePerceptron: (inputs, hiddens, outputs)->\n    if inputs.length && hiddens.length && outputs.length \n      inputLayer = new Layer inputs.length\n      \n      for input, i in inputs\n        inputLayer.list[i].bias = input.bias\n      \n      hiddenLayer = new Layer hiddens.length\n      for h, i in hiddens\n        hiddenLayer.list[i].bias = h.bias\n        \n      outputLayer = new Layer outputs.length\n      for output, i in outputs\n        outputLayer.list[i].bias = output.bias\n\n      inputLayer.project hiddenLayer\n      hiddenLayer.project outputLayer\n        \n      return new Network\n        input:  inputLayer\n        hidden: [hiddenLayer]\n        output: outputLayer\n        \n    return null","export default class HexGrid\n  ","export class SparseList\n  # dictionary of array indices to   \n  list: null\n  # store the keys of the list in sorted order for log(n) retrieval\n  keys: null\n  \n  constructor: (list, offset = 0)->\n    @list = {}\n    @keys = []\n    \n    if list?\n      for x, i in list\n        @set i + offset, x  \n       \n  # set an element\n  set: (searchKey, x)->\n    [kI, found] = @_getKeyIndex searchKey\n    \n    # if found\n    if found\n      i = @keys[kI]\n      if x?\n        return @list[i] = x\n      else\n        delete @list['' + i]\n        @keys.splice kI, 1\n        \n        return x\n    \n    # if not found\n        \n    if x == undefined\n      return x\n      \n    # hendle special case of inserting before 0\n    if kI < 0\n      @keys.unshift searchKey\n    else\n      @keys.splice kI, 0, searchKey\n      \n    @list[searchKey] = x\n    \n    return x\n    \n  \n  # delete an element\n  delete: (searchKey)->\n    @set searchKey, undefined\n      \n  # search for a specific element and return\n  get: (searchKey) ->\n    [kI, found] = @_getKeyIndex searchKey\n    \n    return null if !found\n    \n    return @list[@keys[kI]]\n    \n  # clone so it works with map\n  _getForMap: (searchKey)->\n    [kI, found] = @_getKeyIndex searchKey\n    \n    return null if !found\n    \n    return @list[@keys[kI]]\n\n  # search for a specific element index or nearest index\n  _getKeyIndex: (searchKey) ->\n    keys = @keys\n    \n    minIndex = 0\n    maxIndex = keys.length - 1\n    \n    insertIndex  = (minIndex + maxIndex) / 2 ? 0\n    currentIndex = Math.round insertIndex\n    currentKey   = null\n        \n    shiftRight = false\n\n    while minIndex <= maxIndex\n      currentKey = keys[currentIndex]\n\n      if currentKey < searchKey\n        minIndex = currentIndex + 1\n        insertIndex  = (minIndex + maxIndex) / 2 ? 0\n        currentIndex = Math.ceil(insertIndex)\n      else if currentKey > searchKey\n        maxIndex = currentIndex - 1\n        insertIndex  = (minIndex + maxIndex) / 2 ? 0\n        currentIndex = Math.floor(insertIndex)\n      else\n        #console.log 'Found ', searchKey, '@', currentIndex\n        return [currentIndex, true]\n    #console.log 'Not found ', searchKey, '@', currentIndex\n    return [Math.ceil(insertIndex), false]\n    \n  # dump list to array with offset\n  toArray: (def = 0)->\n    if @keys.length == 0\n      return [[], 0]\n      \n    keys = @keys\n    list = @list\n          \n    arr = []\n    offset = keys[0]\n    \n    for i in [offset..keys[keys.length - 1]]\n      if list[i]?\n        arr.push list[i]\n      else\n        arr.push def\n        \n    return [arr, offset]\n\nexport default class SparseMap extends SparseList\n  constructor: ()->\n    super()\n    \n  # set an element\n  set: (searchKey1, searchKey2, x)->\n    list = @_getForMap searchKey1\n    \n    if list?\n      return list.set searchKey2, x\n\n    list = new SparseList()\n    list.set searchKey2, x\n    super searchKey1, list\n    \n    return x\n    \n  # search for a specific element and return\n  get: (searchKey1, searchKey2) ->\n    list = super searchKey1\n    \n    if list?\n      return list.get searchKey2\n    \n    return undefined\n    \n  # delete an element\n  delete: (searchKey1, searchKey2)->\n    @set searchKey1, searchKey2, undefined\n    \n  toMatrix: (def=0)->\n    if @keys.length == 0\n      return [[], 0, 0]\n      \n    keys = @keys\n    list = @list\n          \n    ars = []\n    mat = []\n    offsetX = keys[0]\n    offsetY = undefined\n    maxY = 0\n    \n    # get lists\n    for i in [offsetX..keys[keys.length - 1]]\n      if list[i]?\n        ars.push list[i].toArray(def)\n      else\n        ars.push [[], 0]\n        \n    # get offsetY and maxY\n    for arr in ars\n      if !offsetY?\n        offsetY = arr[1]\n      else if arr[1] < offsetY \n        offsetY = arr[1]\n      if offsetY + arr[0].length > maxY\n        maxY = offsetY + arr[0].length\n        \n    # display final padded matrix\n    for arr in ars\n      do (arr)->\n        ar = arr[0]\n        #console.log 'left pad', (arr[1] - offsetY), arr\n        for i in [1..(arr[1] - offsetY)] by 1\n          ar.unshift def\n          \n        #console.log 'right pad', (maxY - arr[0].length - offsetY)\n        for i in [-1..(maxY - arr[0].length - offsetY)] by 1\n          ar.push def\n        mat.push ar\n              \n    return [mat, offsetX, offsetY ? 0]","import Block          from 'types/block'\nimport BodyBlock      from 'types/bodyblock'\nimport {\n  minSize\n  maxSize\n  sizeRange\n  minDistance\n  maxDistance\n  distanceRange\n}                     from 'types/constants'\nimport Gene           from 'types/gene'\nimport GenumsFactory  from 'types/gene'\nimport GoBlock        from 'types/goblock'\nimport MuscleBlock    from 'types/muscleblock'\nimport Neuron         from 'types/neuron'\nimport Organism       from 'types/organism'\nimport Primeblock     from 'types/primeblock'\nimport HexGrid        from 'types/hexgrid'\nimport SparseMap      from 'types/sparsemap'\nimport { SparseList } from 'types/sparsemap'\n\n# Classic exports\nexports =\n  Block:     Block\n  BodyBlock: BodyBlock\n  Constants:\n    minSize:       minSize\n    maxSize:       maxSize\n    sizeRange:     sizeRange\n    minDistance:   minDistance\n    maxDistance:   maxDistance\n    distanceRange: distanceRange\n  Gene:          Gene\n  GenumsFactory: GenumsFactory\n  GoBlock:       GoBlock\n  MuscleBlock:   MuscleBlock\n  Neuron:        Neuron\n  Organsim:      Organism\n  Primeblock:    Primeblock\n  HexGrid:       HexGrid\n  SparseList:    SparseList\n  SparseMap:     SparseMap\n  \n# for k,v of es\n#  exports[k] = v\n\nexport default exports"],"names":["Neuron","Block","extend","PI","TAU","cos","sin","BodyBlock","ThinkBlock","GoBlock","MuscleBlock","Bodies","Body","Constraint","PrimeBlock","Gene","exports","GenumsFactory","Organism","Primeblock","HexGrid","SparseMap"],"mappings":"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"}